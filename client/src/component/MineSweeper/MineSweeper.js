import React, { useState, useEffect } from "react";
import { Button, message } from "antd";
import "./MineSweeper.css";

const MineSweeper = () => {
  const [board, setBoard] = useState([]);
  const [gameOver, setGameOver] = useState(false);
  const [difficulty, setDifficulty] = useState("easy");

  useEffect(() => {
    startNewGame();
  }, [difficulty]);

  // h√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu 1 game
  const startNewGame = () => {
    let rows, cols, minesCount;
    // thay ƒë·ªïi d√≤ng, c·ªôt v√† s·ªë l∆∞·ª£ng m√¨n theo ƒë·ªô kh√≥ ƒë√£ ch·ªçn
    switch (difficulty) {
      case "easy":
        rows = 10;
        cols = 10;
        minesCount = 10;
        break;
      case "medium":
        rows = 20;
        cols = 20;
        minesCount = 40;
        break;
      case "hard":
        rows = 20;
        cols = 30;
        minesCount = 80;
        break;
      default:
        rows = 10;
        cols = 10;
        minesCount = 10;
    }
    setBoard(createBoard(rows, cols, minesCount));
    setGameOver(false);
  };

  // h√†m t·∫°o 1 b·∫£ng ƒë·ªÉ ch∆°i
  const createBoard = (rows, cols, minesCount) => {
    let board = Array(rows)
      .fill()
      .map(() =>
        // t·∫°o m·∫£ng m·ªõi v·ªõi rows ph·∫ßn t·ª≠, h√†m fill d√πng ƒë·ªÉ ch√®n null ho·∫∑c undefine v√† t·∫•t c·∫£ ph·∫ßn t·ª≠ v·ª´a ƒë∆∞·ª£c t·∫°o. Map th√¨ gi·ªëng v·ªõi foreach
        Array(cols)
          .fill()
          .map(() => ({
            // th√¨ m·ªói ph·∫ßn t·ª≠ tr√™n s·∫Ω ch·ª©a 1 ph·∫ßn t·ª≠ kh√°c c≈©ng l√† d·∫°ng m·∫£ng, c√≥ th·ªÉ hi·ªÉu m√† m·∫£ng trong m·∫£ng. V√≠ d·ª• rows = 3, cols = 2 th√¨ ƒë·∫ßu ti√™n board s·∫Ω c√≥ 3 ph·∫ßn t·ª≠, sau ƒë√≥ m·ªói ph·∫ßn t·ª≠ trong 3 ph·∫ßn t·ª≠ ƒë√≥ s·∫Ω ch·ª©a 1 m·∫£ng v·ªõi 2 ph·∫ßn t·ª≠.
            hasMine: false,
            isOpen: false,
            isFlagged: false,
            neighboringMines: 0,
            // m·∫£ng v·ª´a ƒë∆∞·ª£c t·∫°o s·∫Ω kh√¥ng ch·ª©a gi√° tr·ªã null ho·∫∑c undefine m√† s·∫Ω bao g·ªìm c√°c thu·ªôc t√≠nh tr√™n, ƒë·∫°i di·ªán cho: c√≥ m√¨n hay kh√¥ng, ƒë√£ m·ªü ch∆∞a, c√≥ c·ªù kh√¥ng v√† s·ªë l∆∞·ª£ng m√¨n ·ªü g·∫ßn ƒë√≥
          }))
      );

    // kh√∫c n√†y l√† b·∫Øt ƒë·∫ßu ph√°t random s·ªë m√¨n
    let minesPlaced = 0;
    while (minesPlaced < minesCount) {
      // ph√°t ƒë·ªß s·ªë m√¨n m√¨nh mu·ªën th√¨ ng·ª´ng
      const row = Math.floor(Math.random() * rows); // h√†m n√†y b√™n tr√≤ ColorTest c√≥ gi·∫£i th√≠ch
      const col = Math.floor(Math.random() * cols);
      if (!board[row][col].hasMine) {
        // n·∫øu √¥ ƒë∆∞·ª£c ch·ªçn t·ª´ random m√† ch∆∞a c√≥ m√¨n th√¨ s·∫Ω set l·∫°i thu·ªôc t√≠nh l√† ƒë√£ c√≥ m√¨n
        board[row][col].hasMine = true;
        minesPlaced++;
      }
    }

    // h√†m n√†y nh√¨n l√† bi·∫øt kh√° ph·ª©c t·∫°p, n√≥i ƒë∆°n gi·∫£n th√¨ ch·ªâ l√† t√≠nh s·ªë l∆∞·ª£ng m√¨n xung quanh 1 √¥
    for (let r = 0; r < rows; r++) {
      // ch·∫°y t·ª´ng h√†ng
      for (let c = 0; c < cols; c++) {
        // ch·∫°y t·ª´ng c·ªôt
        if (!board[r][c].hasMine) {
          // n·∫øu m√† √¥ n√†o kh√¥ng ph·∫£i l√† m√¨n th√¨ m·ªõi t√≠nh s·ªë m√¨n xung quanh
          let neighboringMines = 0;
          for (let i = -1; i <= 1; i++) {
            // v√¨ sao l·∫°i ch·ªâ c√≥ -1 ƒë·∫øn 1, v√¨ vi·ªác ki·ªÉm tra s·ªë m√¨n xung quanh ch·ªâ c·∫ßn ƒë·∫øm s·ªë m√¨n quanh m√¨nh, c√≥ nghƒ©a l√† c√°ch m√¨nh 1 √¥, for n√†y l√† x√©t theo chi·ªÅu d·ªçc
            for (let j = -1; j <= 1; j++) {
              // nh∆∞ tr√™n nh∆∞ng l√† chi·ªÅu ngang
              if (r + i >= 0 && r + i < rows && c + j >= 0 && c + j < cols) {
                // ki·ªÉm tra √¥ ƒëang ƒë∆∞·ª£c ki·ªÉm tra c√≥ n·∫±m trong b·∫£ng kh√¥ng
                if (board[r + i][c + j].hasMine) {
                  // if n√†y s·∫Ω ƒë·∫øm s·ªë m√¨nh xung quanh v√† c·ªông v√†o
                  neighboringMines++;
                }
              }
            }
          }
          board[r][c].neighboringMines = neighboringMines; // set s·ªë m√¨n ƒë·∫øm ƒë∆∞·ª£c v√†o √¥ ƒëang ƒë·∫øm
        }
      }
    }
    // ƒë·∫øm xong h·∫øt s·∫Ω tr·∫£ ra b·∫£ng ƒë√£ set ƒë·ªß thu·ªôc t√≠nh ƒë·ªÉ ch∆°i
    return board;
  };

  // h√†m x·ª≠ l√≠ vi·ªác ch·ªçn 1 √¥ b·∫•t k√¨
  const handleClick = (row, col) => {
    if (gameOver || board[row][col].isOpen || board[row][col].isFlagged) return; // check c√°c ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi ch·ªçn

    const newBoard = [...board]; // sao ch√©p b·∫£ng hi·ªán t·∫°i sang 1 b·∫£ng m·ªõi
    newBoard[row][col].isOpen = true; // set √¥ ƒë√£ ch·ªçn m·ªü l√™n
    setBoard(newBoard); // set b·∫£ng m·ªõi v·ª´a c·∫≠p nh·∫≠t v√†o b·∫£ng ƒëang ch∆°i. C√≤n v·ªÅ l√Ω do v√¨ sao kh√¥ng thay ƒë·ªïi tr·ª±c ti·∫øp tr√™n b·∫£ng c≈© m√† ph·∫£i copy ra ƒë·ªÉ thay ƒë·ªïi th√¨ c√≥ v√†i l√Ω do ch√≠nh sau: React c·∫ßn bi·∫øt khi n√†o state thay ƒë·ªïi, n·∫øu thay ƒë·ªïi tr·ª±c ti·∫øp tr√™n board c≈© th√¨ c√≥ th·ªÉ state kh√¥ng nh·∫≠n bi·∫øt ƒë∆∞·ª£c s·ª± thay ƒë·ªïi v√† kh√¥ng c·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng. D·ªÖ qu·∫£n l√Ω v√† theo d·ªói h∆°n, ... m·ªôt s·ªë l√Ω do n·ªØa c√≥ th·ªÉ l√™n m·∫°ng t√¨m hi·ªÉu

    if (board[row][col].hasMine) {
      // n·∫øu √¥ ƒë∆∞·ª£c ch·ªçn c√≥ m√¨n th√¨ game over
      setGameOver(true);
      message.error("Game Over!");
    } else if (board[row][col].neighboringMines === 0) {
      // n·∫øu √¥ ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≥ m√¨n th√¨ m·ªü c√°c √¥ tr·ªëng
      openEmptyCells(newBoard, row, col);
      setBoard(newBoard);
    }
  };

  // h√†m x·ª≠ l√Ω khi nh·∫•n chu·ªôt ph·∫£i (ƒë·∫∑t c·ªù)
  const handleRightClick = (row, col, event) => {
    event.preventDefault(); // ch·∫∑n menu xu·∫•t hi·ªán khi nh·∫•p chu·ªôt ph·∫£i, c√≤n v·ªÅ l√†m sao ƒë·ªÉ bi·∫øt m√¨nh nh·∫•p chu·ªôt ph·∫£i th√¨ trong th·∫ª div onClick l√† nh·∫•p chu·ªôt tr√°i th√¨ onContextMenu l√† nh·∫•p chu·ªôt ph·∫£i
    if (gameOver || board[row][col].isOpen) return; // check m·ªôt s·ªë th√¥ng tin tr∆∞·ªõc khi th·ª±c hi·ªán

    const newBoard = [...board]; // copy 1 b·∫£n m·ªõi c·ªßa board hi·ªán t·∫°i
    newBoard[row][col].isFlagged = !newBoard[row][col].isFlagged; // set flag cho √¥ v·ª´a nh·∫≠n
    setBoard(newBoard); // c·∫≠p nh·∫≠t l·∫°i b·∫£ng
  };

  // h√†m x·ª≠ l√Ω khi ch·ªçn 1 √¥ tr·ªëng
  const openEmptyCells = (board, row, col) => {
    const rows = board.length; // l·∫•y s·ªë h√†ng c·ªßa board
    const cols = board[0].length; // s·ªë c·ªôt c·ªßa board

    const directions = [
      [-1, -1],
      [-1, 0],
      [-1, 1],
      [0, -1],
      [0, 1],
      [1, -1],
      [1, 0],
      [1, 1],
    ]; // ƒë√¢y l√† c√°c v·ªã tr√≠ xung quanh c·ªßa 1 √¥

    for (let i = 0; i < directions.length; i++) {
      // ch·∫°y t·ª´ng v·ªã tr√≠ xung quanh
      const [dx, dy] = directions[i]; // l·∫•y gi√° tr·ªã c·ªßa t·ª´ng v·ªã tr√≠
      const newRow = row + dx; // l·∫•y v·ªã tr√≠ h√†ng c·ªßa √¥ xung quanh
      const newCol = col + dy; // l·∫•y v·ªã tr√≠ c·ªôt

      if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
        // ƒë·∫£m b·∫£o √¥ ƒëang x√©t kh√¥ng v∆∞·ª£t qua ph·∫°m vi c·ªßa b·∫£ng
        if (!board[newRow][newCol].isOpen && !board[newRow][newCol].hasMine) {
          // n·∫øu √¥ ƒë√≥ ch∆∞a m·ªü v√† kh√¥ng c√≥ m√¨n th√¨ m·ªü
          board[newRow][newCol].isOpen = true;
          if (board[newRow][newCol].neighboringMines === 0) {
            // n·∫øu √¥ v·ª´a m·ªü v·∫´n l√† 1 √¥ tr·ªëng th√¨ g·ªçi ƒë·ªá qui l·∫°i h√†m ƒë·ªÉ ti·∫øp t·ª•c m·ªü c√°c √¥ tr·ªëng li√™n ti·∫øp
            openEmptyCells(board, newRow, newCol);
          }
        }
      }
    }
  };

  return (
    <div className="container-minesweeper">
      <h2>MineSweeper Game</h2>
      <div>
        <label>Difficulty: </label>
        <select
          onChange={(e) => setDifficulty(e.target.value)}
          value={difficulty}
        >
          <option value="easy">Easy (10x10, 10 mines)</option>
          <option value="medium">Medium (20x20, 40 mines)</option>
          <option value="hard">Hard (20x30, 80 mines)</option>
        </select>
      </div>
      {gameOver && <Button onClick={startNewGame}>Try Again</Button>}
      {board.map((row, r) => (
        <div key={r} style={{ display: "flex" }}>
          {row.map((cell, c) => (
            <div
              key={c}
              onClick={() => handleClick(r, c)}
              onContextMenu={(e) => handleRightClick(r, c, e)}
              style={{
                width: 30,
                height: 30,
                border: "1px solid black",
                textAlign: "center",
                lineHeight: "30px",
                backgroundColor: cell.isOpen ? "#ddd" : "#aaa",
                cursor: "pointer",
              }}
            >
              {cell.isOpen
                ? cell.hasMine
                  ? "üí£"
                  : cell.neighboringMines || ""
                : cell.isFlagged
                ? "üö©"
                : ""}
            </div>
          ))}
        </div>
      ))}
    </div>
  );
};

export default MineSweeper;
